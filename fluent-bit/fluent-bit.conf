[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    flush        1

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    daemon       Off

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    log_level    info

    # Parsers File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf

    # Plugins File
    # ============
    # specify an optional 'Plugins' configuration file to load external plugins.
    plugins_file plugins.conf

    # HTTP Server
    # ===========
    # Enable/Disable the built-in HTTP Server for metrics
    http_server  Off
    http_listen  0.0.0.0
    http_port    2020

    # Storage
    # =======
    # Fluent Bit can use memory and filesystem buffering based mechanisms
    #
    # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
    #
    # storage metrics
    # ---------------
    # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
    # exported only if the 'http_server' option is enabled.
    #
    storage.metrics on

    # storage.path
    # ------------
    # absolute file system path to store filesystem data buffers (chunks).
    #
    # storage.path /tmp/storage

    # storage.sync
    # ------------
    # configure the synchronization mode used to store the data into the
    # filesystem. It can take the values normal or full.
    #
    # storage.sync normal

    # storage.checksum
    # ----------------
    # enable the data integrity check when writing and reading data from the
    # filesystem. The storage layer uses the CRC32 algorithm.
    #
    # storage.checksum off

    # storage.backlog.mem_limit
    # -------------------------
    # if storage.path is set, Fluent Bit will look for data chunks that were
    # not delivered and are still in the storage layer, these are called
    # backlog data. This option configure a hint of maximum value of memory
    # to use when processing these records.
    #
    # storage.backlog.mem_limit 5M

[INPUT]
    Name tail
    Tag my.tag
    Path /var/lib/docker/containers/*/*.log

# having multiple [FILTER] blocks allows one to control the flow of changes as they read top down.
[FILTER]
    Name modify
    # here we only match on one tag, my.tag, defined in the [INPUT] section earlier
    Match my.tag
    # below, we're renaming the host.cpu attribute to CPU
    Rename host.cpu CPU

[FILTER]
    Name record_modifier
    # match on all tags, *, so all logs get decorated per the Record clauses below. Record adds attributes + their values to each record.
    Match *
    # adding a logtype attribute ensures your logs will be automatically parsed by our built-in parsing rules
    Record logtype nginx
    # add the server's hostname to all logs generated
    Record hostname ${HOSTNAME}

# [OUTPUT]
#     Name newrelic
#     Match *
#     licenseKey <NEW_RELIC_INGEST_KEY>
#     proxy <HTTPS_PROXY>
#     endpoint https://log-api.eu.newrelic.com/log/v1
#     # maxBufferSize 256000
#     # maxRecords 1024

[OUTPUT]
    Name                          s3
    Match                         *
    bucket                        <MONITOR_BUCKET>
    region                        fr-par
    endpoint                      s3.fr-par.scw.cloud
    total_file_size               50M
    compression                   gzip
    upload_timeout                1m
    workers                       1
    use_put_object                On
    s3_key_format                 /<MONITOR_DIR>/%Y%m%d/%Y%m%d-%H%M_$UUID.jsonl
